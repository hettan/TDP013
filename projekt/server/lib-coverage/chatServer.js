/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['chatServer.js']) {
  _$jscoverage['chatServer.js'] = [];
  _$jscoverage['chatServer.js'][2] = 0;
  _$jscoverage['chatServer.js'][5] = 0;
  _$jscoverage['chatServer.js'][6] = 0;
  _$jscoverage['chatServer.js'][8] = 0;
  _$jscoverage['chatServer.js'][9] = 0;
  _$jscoverage['chatServer.js'][13] = 0;
  _$jscoverage['chatServer.js'][14] = 0;
  _$jscoverage['chatServer.js'][18] = 0;
  _$jscoverage['chatServer.js'][19] = 0;
  _$jscoverage['chatServer.js'][20] = 0;
  _$jscoverage['chatServer.js'][21] = 0;
  _$jscoverage['chatServer.js'][22] = 0;
  _$jscoverage['chatServer.js'][23] = 0;
  _$jscoverage['chatServer.js'][26] = 0;
  _$jscoverage['chatServer.js'][27] = 0;
  _$jscoverage['chatServer.js'][28] = 0;
  _$jscoverage['chatServer.js'][29] = 0;
  _$jscoverage['chatServer.js'][32] = 0;
  _$jscoverage['chatServer.js'][35] = 0;
  _$jscoverage['chatServer.js'][36] = 0;
  _$jscoverage['chatServer.js'][37] = 0;
  _$jscoverage['chatServer.js'][38] = 0;
  _$jscoverage['chatServer.js'][39] = 0;
  _$jscoverage['chatServer.js'][40] = 0;
  _$jscoverage['chatServer.js'][43] = 0;
  _$jscoverage['chatServer.js'][44] = 0;
  _$jscoverage['chatServer.js'][45] = 0;
  _$jscoverage['chatServer.js'][46] = 0;
  _$jscoverage['chatServer.js'][49] = 0;
  _$jscoverage['chatServer.js'][52] = 0;
  _$jscoverage['chatServer.js'][53] = 0;
  _$jscoverage['chatServer.js'][54] = 0;
  _$jscoverage['chatServer.js'][55] = 0;
  _$jscoverage['chatServer.js'][56] = 0;
  _$jscoverage['chatServer.js'][57] = 0;
  _$jscoverage['chatServer.js'][58] = 0;
  _$jscoverage['chatServer.js'][59] = 0;
  _$jscoverage['chatServer.js'][60] = 0;
  _$jscoverage['chatServer.js'][61] = 0;
  _$jscoverage['chatServer.js'][66] = 0;
  _$jscoverage['chatServer.js'][69] = 0;
  _$jscoverage['chatServer.js'][73] = 0;
  _$jscoverage['chatServer.js'][77] = 0;
  _$jscoverage['chatServer.js'][78] = 0;
  _$jscoverage['chatServer.js'][82] = 0;
  _$jscoverage['chatServer.js'][86] = 0;
  _$jscoverage['chatServer.js'][87] = 0;
  _$jscoverage['chatServer.js'][88] = 0;
  _$jscoverage['chatServer.js'][89] = 0;
  _$jscoverage['chatServer.js'][91] = 0;
  _$jscoverage['chatServer.js'][94] = 0;
  _$jscoverage['chatServer.js'][95] = 0;
  _$jscoverage['chatServer.js'][97] = 0;
  _$jscoverage['chatServer.js'][98] = 0;
  _$jscoverage['chatServer.js'][99] = 0;
  _$jscoverage['chatServer.js'][100] = 0;
  _$jscoverage['chatServer.js'][101] = 0;
  _$jscoverage['chatServer.js'][104] = 0;
  _$jscoverage['chatServer.js'][107] = 0;
  _$jscoverage['chatServer.js'][108] = 0;
  _$jscoverage['chatServer.js'][109] = 0;
  _$jscoverage['chatServer.js'][110] = 0;
  _$jscoverage['chatServer.js'][111] = 0;
  _$jscoverage['chatServer.js'][112] = 0;
  _$jscoverage['chatServer.js'][118] = 0;
  _$jscoverage['chatServer.js'][120] = 0;
  _$jscoverage['chatServer.js'][127] = 0;
  _$jscoverage['chatServer.js'][129] = 0;
  _$jscoverage['chatServer.js'][137] = 0;
  _$jscoverage['chatServer.js'][147] = 0;
  _$jscoverage['chatServer.js'][155] = 0;
  _$jscoverage['chatServer.js'][156] = 0;
  _$jscoverage['chatServer.js'][157] = 0;
  _$jscoverage['chatServer.js'][158] = 0;
  _$jscoverage['chatServer.js'][164] = 0;
  _$jscoverage['chatServer.js'][165] = 0;
  _$jscoverage['chatServer.js'][166] = 0;
  _$jscoverage['chatServer.js'][169] = 0;
  _$jscoverage['chatServer.js'][176] = 0;
}
_$jscoverage['chatServer.js'].source = ["// websocket and http servers","var webSocketServer = require('websocket').server;","","// list of currently connected clients (users)","var clients = [ ];","var groups = {};","","var userIndex = 0;","var groupCount = 0;","/**"," * Helper function for escaping input strings"," */","function htmlEntities(str) {","    return String(str).replace(/&amp;/g, '&amp;amp;').replace(/&lt;/g, '&amp;lt;')","        .replace(/&gt;/g, '&amp;gt;').replace(/\"/g, '&amp;quot;');","}","","function createGroup(userIndex) {","    var newGroup = new Array();","    newGroup[0] = userIndex;","    groupCount++;","    groups[groupCount] = newGroup;","    return groupCount;","}","","function inGroup(groupID, userIndex) {","    for(var i=0; i &lt; groups[groupID].length; i++) {","        if (groups[groupID][i] == userIndex) {","            return true;","        }","    }","    return false;","}","        ","function addToGroup(groupID, user) {","    for(var i=0; i &lt; clients.length; i++) {","        console.log(clients[i][\"user\"]);","        if (clients[i][\"user\"] == user) {","            if (inGroup(user,userIndex)) {","                return false;","            }","                ","            delete groups[clients[i][\"group\"]];","            groups[groupID].push(i);","            clients[i][\"group\"] = groupID;","            return true;","        }","    }","    return false;","}","","function removeFromGroup(groupID, user) {","    console.log(\"rem callled - for group=\" + groupID + \"   user=\"+user);","    for(var i=0; i &lt; clients.length; i++) {","        if (clients[i][\"user\"] == user) {","            for (var x=0; x &lt; groups[groupID].length; x++) {","                if (groups[groupID][x] == i) {","                    groups[groupID].splice(x,1);","                    clients[i][\"group\"] = createGroup(i);","                    console.log(groups);","                    return true;","                }","            }","        }","    }","    return false;","}","","function start(server) {","    /**","     * WebSocket server","     */","    var wsServer = new webSocketServer({","        httpServer: server","    });","","    wsServer.on('request', function(request) {","        console.log('Connection from ' + request.origin);","","        // accept connection - you should check 'request.origin' to make sure that","        // client is connecting from your website","        var connection = request.accept(null, request.origin);","        // we need to know client index to remove them on 'close' event","        //var userName = \"test\"+userIndex;","        //userIndex++;","        var userName;","        var index = clients.push({\"user\": userName,\"conn\": connection, \"group\": -1}) - 1;","        clients[index][\"group\"] = createGroup(index);","        var userSet = false;","","        console.log('Connection accepted.');","","        // user sent some message","        connection.on('message', function(message) {","            var msg = message.utf8Data;","            ","            if (!userSet) {","                console.log(msg);","                userName = msg;","                clients[index][\"user\"] = userName;","                userSet = true;","            }","            else {","                console.log(' Received Message from '","                            + userName + ': ' + msg);","","                var obj;","                if (msg.substr(0,5) == \"/inv \" || msg.substr(0,5) == \"/rem \") {","                    var targetUser = msg.substr(5,msg.length -1);","                    console.log(msg);","                    if (targetUser == userName) {","                        obj = {","                            time: (new Date()).getTime(),","                            text: htmlEntities(\"Cant use that on yourself!\"),","                            name: \"server\"","                        };","                    }","                    else if (msg.substr(0,5) == \"/inv \" &amp;&amp;","                             addToGroup(clients[index][\"group\"], targetUser)) {","                        obj = {","                            time: (new Date()).getTime(),","                            text: htmlEntities(targetUser + \" has joined the conversation\"),","                            name: \"server\"","                        };","                        ","                    }","                    else if (msg.substr(0,5) == \"/rem \" &amp;&amp;","                             removeFromGroup(clients[index][\"group\"], targetUser)) {","                        obj = {","                            time: (new Date()).getTime(),","                            text: htmlEntities(targetUser + \" has been removed from the conversation\"),","                            name: \"server\"","                        };","                        ","                    }","                    else {","                        obj = {","                            time: (new Date()).getTime(),","                            text: htmlEntities(targetUser + \" could not be found or is already in the conversation!\"),","                            name: \"server\"","                        };","                    }","                    ","                }","                else {","                    ","                    obj = {","                        time: (new Date()).getTime(),","                        text: htmlEntities(msg),","                        name: userName","                    };           ","                }","                ","                // broadcast message to all clients in group","                var group = groups[clients[index][\"group\"]];","                var json = JSON.stringify(obj);","                for (var i=0; i &lt; group.length; i++) {","                    clients[group[i]][\"conn\"].sendUTF(json);","                }","            }","        });","","        // user disconnected","        connection.on('close', function(connection) {","            if (userName !== false) {","                console.log(\"User disconnected.\");","                // remove user from the list of connected clients","                ","                delete clients[index];","            }","        });","","    });","}","","exports.start = start;"];
_$jscoverage['chatServer.js'][2]++;
var webSocketServer = require("websocket").server;
_$jscoverage['chatServer.js'][5]++;
var clients = [];
_$jscoverage['chatServer.js'][6]++;
var groups = {};
_$jscoverage['chatServer.js'][8]++;
var userIndex = 0;
_$jscoverage['chatServer.js'][9]++;
var groupCount = 0;
_$jscoverage['chatServer.js'][13]++;
function htmlEntities(str) {
  _$jscoverage['chatServer.js'][14]++;
  return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
}
_$jscoverage['chatServer.js'][18]++;
function createGroup(userIndex) {
  _$jscoverage['chatServer.js'][19]++;
  var newGroup = new Array();
  _$jscoverage['chatServer.js'][20]++;
  newGroup[0] = userIndex;
  _$jscoverage['chatServer.js'][21]++;
  (groupCount++);
  _$jscoverage['chatServer.js'][22]++;
  groups[groupCount] = newGroup;
  _$jscoverage['chatServer.js'][23]++;
  return groupCount;
}
_$jscoverage['chatServer.js'][26]++;
function inGroup(groupID, userIndex) {
  _$jscoverage['chatServer.js'][27]++;
  for (var i = 0; (i < groups[groupID].length); (i++)) {
    _$jscoverage['chatServer.js'][28]++;
    if ((groups[groupID][i] == userIndex)) {
      _$jscoverage['chatServer.js'][29]++;
      return true;
    }
}
  _$jscoverage['chatServer.js'][32]++;
  return false;
}
_$jscoverage['chatServer.js'][35]++;
function addToGroup(groupID, user) {
  _$jscoverage['chatServer.js'][36]++;
  for (var i = 0; (i < clients.length); (i++)) {
    _$jscoverage['chatServer.js'][37]++;
    console.log(clients[i].user);
    _$jscoverage['chatServer.js'][38]++;
    if ((clients[i].user == user)) {
      _$jscoverage['chatServer.js'][39]++;
      if (inGroup(user, userIndex)) {
        _$jscoverage['chatServer.js'][40]++;
        return false;
      }
      _$jscoverage['chatServer.js'][43]++;
      (delete groups[clients[i].group]);
      _$jscoverage['chatServer.js'][44]++;
      groups[groupID].push(i);
      _$jscoverage['chatServer.js'][45]++;
      clients[i].group = groupID;
      _$jscoverage['chatServer.js'][46]++;
      return true;
    }
}
  _$jscoverage['chatServer.js'][49]++;
  return false;
}
_$jscoverage['chatServer.js'][52]++;
function removeFromGroup(groupID, user) {
  _$jscoverage['chatServer.js'][53]++;
  console.log(("rem callled - for group=" + groupID + "   user=" + user));
  _$jscoverage['chatServer.js'][54]++;
  for (var i = 0; (i < clients.length); (i++)) {
    _$jscoverage['chatServer.js'][55]++;
    if ((clients[i].user == user)) {
      _$jscoverage['chatServer.js'][56]++;
      for (var x = 0; (x < groups[groupID].length); (x++)) {
        _$jscoverage['chatServer.js'][57]++;
        if ((groups[groupID][x] == i)) {
          _$jscoverage['chatServer.js'][58]++;
          groups[groupID].splice(x, 1);
          _$jscoverage['chatServer.js'][59]++;
          clients[i].group = createGroup(i);
          _$jscoverage['chatServer.js'][60]++;
          console.log(groups);
          _$jscoverage['chatServer.js'][61]++;
          return true;
        }
}
    }
}
  _$jscoverage['chatServer.js'][66]++;
  return false;
}
_$jscoverage['chatServer.js'][69]++;
function start(server) {
  _$jscoverage['chatServer.js'][73]++;
  var wsServer = new webSocketServer({httpServer: server});
  _$jscoverage['chatServer.js'][77]++;
  wsServer.on("request", (function (request) {
  _$jscoverage['chatServer.js'][78]++;
  console.log(("Connection from " + request.origin));
  _$jscoverage['chatServer.js'][82]++;
  var connection = request.accept(null, request.origin);
  _$jscoverage['chatServer.js'][86]++;
  var userName;
  _$jscoverage['chatServer.js'][87]++;
  var index = (clients.push({"user": userName, "conn": connection, "group": -1}) - 1);
  _$jscoverage['chatServer.js'][88]++;
  clients[index].group = createGroup(index);
  _$jscoverage['chatServer.js'][89]++;
  var userSet = false;
  _$jscoverage['chatServer.js'][91]++;
  console.log("Connection accepted.");
  _$jscoverage['chatServer.js'][94]++;
  connection.on("message", (function (message) {
  _$jscoverage['chatServer.js'][95]++;
  var msg = message.utf8Data;
  _$jscoverage['chatServer.js'][97]++;
  if ((! userSet)) {
    _$jscoverage['chatServer.js'][98]++;
    console.log(msg);
    _$jscoverage['chatServer.js'][99]++;
    userName = msg;
    _$jscoverage['chatServer.js'][100]++;
    clients[index].user = userName;
    _$jscoverage['chatServer.js'][101]++;
    userSet = true;
  }
  else {
    _$jscoverage['chatServer.js'][104]++;
    console.log((" Received Message from " + userName + ": " + msg));
    _$jscoverage['chatServer.js'][107]++;
    var obj;
    _$jscoverage['chatServer.js'][108]++;
    if (((msg.substr(0, 5) == "/inv ") || (msg.substr(0, 5) == "/rem "))) {
      _$jscoverage['chatServer.js'][109]++;
      var targetUser = msg.substr(5, (msg.length - 1));
      _$jscoverage['chatServer.js'][110]++;
      console.log(msg);
      _$jscoverage['chatServer.js'][111]++;
      if ((targetUser == userName)) {
        _$jscoverage['chatServer.js'][112]++;
        obj = {time: new Date().getTime(), text: htmlEntities("Cant use that on yourself!"), name: "server"};
      }
      else {
        _$jscoverage['chatServer.js'][118]++;
        if (((msg.substr(0, 5) == "/inv ") && addToGroup(clients[index].group, targetUser))) {
          _$jscoverage['chatServer.js'][120]++;
          obj = {time: new Date().getTime(), text: htmlEntities((targetUser + " has joined the conversation")), name: "server"};
        }
        else {
          _$jscoverage['chatServer.js'][127]++;
          if (((msg.substr(0, 5) == "/rem ") && removeFromGroup(clients[index].group, targetUser))) {
            _$jscoverage['chatServer.js'][129]++;
            obj = {time: new Date().getTime(), text: htmlEntities((targetUser + " has been removed from the conversation")), name: "server"};
          }
          else {
            _$jscoverage['chatServer.js'][137]++;
            obj = {time: new Date().getTime(), text: htmlEntities((targetUser + " could not be found or is already in the conversation!")), name: "server"};
          }
        }
      }
    }
    else {
      _$jscoverage['chatServer.js'][147]++;
      obj = {time: new Date().getTime(), text: htmlEntities(msg), name: userName};
    }
    _$jscoverage['chatServer.js'][155]++;
    var group = groups[clients[index].group];
    _$jscoverage['chatServer.js'][156]++;
    var json = JSON.stringify(obj);
    _$jscoverage['chatServer.js'][157]++;
    for (var i = 0; (i < group.length); (i++)) {
      _$jscoverage['chatServer.js'][158]++;
      clients[group[i]].conn.sendUTF(json);
}
  }
}));
  _$jscoverage['chatServer.js'][164]++;
  connection.on("close", (function (connection) {
  _$jscoverage['chatServer.js'][165]++;
  if ((userName !== false)) {
    _$jscoverage['chatServer.js'][166]++;
    console.log("User disconnected.");
    _$jscoverage['chatServer.js'][169]++;
    (delete clients[index]);
  }
}));
}));
}
_$jscoverage['chatServer.js'][176]++;
exports.start = start;
