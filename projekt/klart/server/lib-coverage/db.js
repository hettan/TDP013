/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['db.js']) {
  _$jscoverage['db.js'] = [];
  _$jscoverage['db.js'][1] = 0;
  _$jscoverage['db.js'][3] = 0;
  _$jscoverage['db.js'][4] = 0;
  _$jscoverage['db.js'][5] = 0;
  _$jscoverage['db.js'][8] = 0;
  _$jscoverage['db.js'][9] = 0;
  _$jscoverage['db.js'][10] = 0;
  _$jscoverage['db.js'][11] = 0;
  _$jscoverage['db.js'][12] = 0;
  _$jscoverage['db.js'][15] = 0;
  _$jscoverage['db.js'][20] = 0;
  _$jscoverage['db.js'][21] = 0;
  _$jscoverage['db.js'][22] = 0;
  _$jscoverage['db.js'][23] = 0;
  _$jscoverage['db.js'][25] = 0;
  _$jscoverage['db.js'][32] = 0;
  _$jscoverage['db.js'][33] = 0;
  _$jscoverage['db.js'][37] = 0;
  _$jscoverage['db.js'][44] = 0;
  _$jscoverage['db.js'][45] = 0;
  _$jscoverage['db.js'][46] = 0;
  _$jscoverage['db.js'][47] = 0;
  _$jscoverage['db.js'][49] = 0;
  _$jscoverage['db.js'][50] = 0;
  _$jscoverage['db.js'][53] = 0;
  _$jscoverage['db.js'][59] = 0;
  _$jscoverage['db.js'][60] = 0;
  _$jscoverage['db.js'][61] = 0;
  _$jscoverage['db.js'][63] = 0;
  _$jscoverage['db.js'][64] = 0;
  _$jscoverage['db.js'][70] = 0;
  _$jscoverage['db.js'][71] = 0;
  _$jscoverage['db.js'][72] = 0;
  _$jscoverage['db.js'][73] = 0;
  _$jscoverage['db.js'][74] = 0;
  _$jscoverage['db.js'][76] = 0;
  _$jscoverage['db.js'][77] = 0;
  _$jscoverage['db.js'][78] = 0;
  _$jscoverage['db.js'][79] = 0;
  _$jscoverage['db.js'][83] = 0;
  _$jscoverage['db.js'][88] = 0;
  _$jscoverage['db.js'][89] = 0;
  _$jscoverage['db.js'][90] = 0;
  _$jscoverage['db.js'][91] = 0;
  _$jscoverage['db.js'][93] = 0;
  _$jscoverage['db.js'][94] = 0;
  _$jscoverage['db.js'][95] = 0;
  _$jscoverage['db.js'][97] = 0;
  _$jscoverage['db.js'][100] = 0;
  _$jscoverage['db.js'][104] = 0;
  _$jscoverage['db.js'][110] = 0;
  _$jscoverage['db.js'][111] = 0;
  _$jscoverage['db.js'][113] = 0;
  _$jscoverage['db.js'][115] = 0;
  _$jscoverage['db.js'][118] = 0;
  _$jscoverage['db.js'][122] = 0;
  _$jscoverage['db.js'][123] = 0;
  _$jscoverage['db.js'][124] = 0;
  _$jscoverage['db.js'][125] = 0;
  _$jscoverage['db.js'][126] = 0;
  _$jscoverage['db.js'][127] = 0;
  _$jscoverage['db.js'][128] = 0;
  _$jscoverage['db.js'][131] = 0;
  _$jscoverage['db.js'][132] = 0;
  _$jscoverage['db.js'][140] = 0;
  _$jscoverage['db.js'][141] = 0;
  _$jscoverage['db.js'][142] = 0;
  _$jscoverage['db.js'][143] = 0;
  _$jscoverage['db.js'][144] = 0;
  _$jscoverage['db.js'][146] = 0;
  _$jscoverage['db.js'][147] = 0;
  _$jscoverage['db.js'][148] = 0;
  _$jscoverage['db.js'][149] = 0;
  _$jscoverage['db.js'][150] = 0;
  _$jscoverage['db.js'][154] = 0;
  _$jscoverage['db.js'][155] = 0;
  _$jscoverage['db.js'][163] = 0;
  _$jscoverage['db.js'][164] = 0;
  _$jscoverage['db.js'][165] = 0;
  _$jscoverage['db.js'][166] = 0;
  _$jscoverage['db.js'][167] = 0;
  _$jscoverage['db.js'][168] = 0;
  _$jscoverage['db.js'][169] = 0;
  _$jscoverage['db.js'][172] = 0;
  _$jscoverage['db.js'][177] = 0;
  _$jscoverage['db.js'][178] = 0;
  _$jscoverage['db.js'][179] = 0;
  _$jscoverage['db.js'][181] = 0;
  _$jscoverage['db.js'][182] = 0;
  _$jscoverage['db.js'][189] = 0;
  _$jscoverage['db.js'][190] = 0;
  _$jscoverage['db.js'][191] = 0;
  _$jscoverage['db.js'][192] = 0;
  _$jscoverage['db.js'][193] = 0;
  _$jscoverage['db.js'][194] = 0;
  _$jscoverage['db.js'][195] = 0;
  _$jscoverage['db.js'][196] = 0;
  _$jscoverage['db.js'][197] = 0;
  _$jscoverage['db.js'][198] = 0;
  _$jscoverage['db.js'][199] = 0;
}
_$jscoverage['db.js'].source = ["var mongo = require('mongodb');","","var server = new mongo.Server('localhost', 27017);","var db = new mongo.Db('web', server);","var loginRepo = \"projekt\";","","//Start the db connection once until server is closed","function start(callback){    ","    db.open(function(err,db){","        if(!err){","            console.log(\"Connected to DB\");","            callback(true);","        }","        else {","            callback(false);","        }","    });","}","","function regUser(response, username, password, name, callback) {","    db.collection(loginRepo, function(err, collection) {","        collection.findOne({\"username\":username}, function(err, user){","            if (user == null) {","                //Username doesn't exist","                var newUser = {\"username\" : username,","                               \"password\" : password,","                               \"active\":false,","                               \"name\": name,","                               \"posts\":[],","                               \"friends\": [username]","                              };","                collection.insert(newUser, function(err, result){","                    callback(true);","                });","            }","            else {","                callback(false);","            }","        });","    });","                         ","}","","function userLogin(response, username, password, callback){","    db.collection(loginRepo, function(err, collection){","            collection.findOne({\"username\":username}, function(err, user){","                if (user != null &amp;&amp; user[\"password\"] == password) {","                    //Set user to active for chat-usage","                    collection.update({\"username\":username},{$set:{\"active\":true}});","                    callback(\"1\");","                }","                else {","                    callback(\"0\");","                }","            });","    });","}","","function userLogoff(response, username, callback) {","    db.collection(loginRepo, function(err, collection){","        collection.findOne({\"username\":username}, function(err, user){","            //Set user to inactive for chat-usage","            collection.update({\"username\":username},{$set:{\"active\":false}});","            callback(\"You logged off!\");","        });","  ","    });","}","","function getProfile(response, userprofile, username, callback){","    db.collection(loginRepo, function(err, collection){       ","        collection.findOne({\"username\":username}, function(err, user){","            var friends = false;","            if(userprofile != username) {","                //Check if friends","                for (var index in user[\"friends\"]) {","                    if(userprofile == user[\"friends\"][index]) {","                        friends = true;","                        break;","                    }","                }","            }","            callback({\"name\": user[\"name\"], \"username\":user[\"username\"], \"posts\": user[\"posts\"], \"friends\": friends});","        });","    });","}","","function addPost(response, src_user, target_user, text, callback){","    db.collection(loginRepo, function(err, collection) {","        collection.findOne({\"username\":target_user}, function(err, target_prof){","            if(target_prof != null) {","                //Check if friends","                if(target_prof[\"friends\"].indexOf(src_user) != -1) {","                    var newPost = {\"post\" : text, \"user\" : src_user};","                    collection.update({\"username\":target_user},","                                      {$push:{\"posts\": newPost}});","                    callback(\"Post sent to \" + target_user + \"'s profile!\");","                }","                else {","                    callback(\"Cant post on \" +target_user + \"'s profile yet. You need to be friends first!\");","                }","            }","            else {","                callback(target_user + \" is not a registred user!\");","            }","        });","    });","}","","function addFriend(response, src_user, target_user, callback){","    db.collection(loginRepo, function(err, collection){","        //Update on both src and target profile","        collection.update({\"username\":src_user},","                          {$push:{\"friends\": target_user}});","        collection.update({\"username\":target_user},","                          {$push:{\"friends\": src_user}});","        ","        callback(target_user + \" added to your friends!\");","    });","}","","function getFriends(response, username, callback){","    var friends = new Array();","    db.collection(loginRepo, function(err, collection){","        collection.findOne({\"username\":username}, function(err, user){","            for (var index in user[\"friends\"]) {","                collection.findOne({\"username\": user[\"friends\"][index]}, function(err, friend) {","                    friends.push({\"name\": friend[\"name\"], \"user\": friend[\"username\"]});","","                    //When finished do callback","                    if (user[\"friends\"].length == friends.length) {","                        callback(friends);","                    }","                });","            }","        });","    });","}","","function getOnlineFriends(response, username, callback){","    var onlineFriends = new Array();","    db.collection(loginRepo, function(err, collection){","        collection.findOne({\"username\":username}, function(err, user){","            var count = 0;","            //Check each friend if they are active","            for (var index in user[\"friends\"]) {","                collection.findOne({\"username\": user[\"friends\"][index]}, function(err, friend) {","                    count++;","                    if (friend[\"active\"] &amp;&amp; friend[\"username\"] != username) {","                        onlineFriends.push({\"name\": friend[\"name\"], \"user\": friend[\"username\"]});","                    }","","                    //When finished do callback","                    if (user[\"friends\"].length == count) {","                        callback(onlineFriends);","                    }","                });","            }","        });","    });","}","","function searchUser(response, query, callback){","    db.collection(loginRepo, function(err, collection){","        var regexp = \"(?i).*(\" + query + \")+.*\"; //Gets all users that contains the phrase in their name","        collection.find({\"name\": {$regex: regexp}}).toArray( function(err, resultProfiles){","            var result = new Array();","            for (var index in resultProfiles) {","                result[index] = {\"user\": resultProfiles[index][\"username\"],","                                 \"name\": resultProfiles[index][\"name\"]};","            }","            callback(result);","        });","    });","}","","function userDisconnect(username) {","    db.collection(loginRepo, function(err, collection){","        collection.findOne({\"name\":username}, function(err, user){","            //Set user to inactive for chat-usage","            collection.update({\"username\":username},{$set:{\"active\":false}});","            console.log(\"User set to inactive\");","        });","        ","    });","}","","","exports.start = start;","exports.regUser = regUser;","exports.userLogin = userLogin;","exports.userLogoff = userLogoff;","exports.addPost = addPost;","exports.getProfile = getProfile;","exports.addFriend = addFriend;","exports.getFriends = getFriends;","exports.getOnlineFriends = getOnlineFriends;","exports.searchUser = searchUser;","exports.userDisconnect = userDisconnect;",""];
_$jscoverage['db.js'][1]++;
var mongo = require("mongodb");
_$jscoverage['db.js'][3]++;
var server = new (mongo.Server)("localhost", 27017);
_$jscoverage['db.js'][4]++;
var db = new (mongo.Db)("web", server);
_$jscoverage['db.js'][5]++;
var loginRepo = "projekt";
_$jscoverage['db.js'][8]++;
function start(callback) {
  _$jscoverage['db.js'][9]++;
  db.open((function (err, db) {
  _$jscoverage['db.js'][10]++;
  if ((! err)) {
    _$jscoverage['db.js'][11]++;
    console.log("Connected to DB");
    _$jscoverage['db.js'][12]++;
    callback(true);
  }
  else {
    _$jscoverage['db.js'][15]++;
    callback(false);
  }
}));
}
_$jscoverage['db.js'][20]++;
function regUser(response, username, password, name, callback) {
  _$jscoverage['db.js'][21]++;
  db.collection(loginRepo, (function (err, collection) {
  _$jscoverage['db.js'][22]++;
  collection.findOne({"username": username}, (function (err, user) {
  _$jscoverage['db.js'][23]++;
  if ((user == null)) {
    _$jscoverage['db.js'][25]++;
    var newUser = {"username": username, "password": password, "active": false, "name": name, "posts": [], "friends": [username]};
    _$jscoverage['db.js'][32]++;
    collection.insert(newUser, (function (err, result) {
  _$jscoverage['db.js'][33]++;
  callback(true);
}));
  }
  else {
    _$jscoverage['db.js'][37]++;
    callback(false);
  }
}));
}));
}
_$jscoverage['db.js'][44]++;
function userLogin(response, username, password, callback) {
  _$jscoverage['db.js'][45]++;
  db.collection(loginRepo, (function (err, collection) {
  _$jscoverage['db.js'][46]++;
  collection.findOne({"username": username}, (function (err, user) {
  _$jscoverage['db.js'][47]++;
  if (((user != null) && (user.password == password))) {
    _$jscoverage['db.js'][49]++;
    collection.update({"username": username}, {$set: {"active": true}});
    _$jscoverage['db.js'][50]++;
    callback("1");
  }
  else {
    _$jscoverage['db.js'][53]++;
    callback("0");
  }
}));
}));
}
_$jscoverage['db.js'][59]++;
function userLogoff(response, username, callback) {
  _$jscoverage['db.js'][60]++;
  db.collection(loginRepo, (function (err, collection) {
  _$jscoverage['db.js'][61]++;
  collection.findOne({"username": username}, (function (err, user) {
  _$jscoverage['db.js'][63]++;
  collection.update({"username": username}, {$set: {"active": false}});
  _$jscoverage['db.js'][64]++;
  callback("You logged off!");
}));
}));
}
_$jscoverage['db.js'][70]++;
function getProfile(response, userprofile, username, callback) {
  _$jscoverage['db.js'][71]++;
  db.collection(loginRepo, (function (err, collection) {
  _$jscoverage['db.js'][72]++;
  collection.findOne({"username": username}, (function (err, user) {
  _$jscoverage['db.js'][73]++;
  var friends = false;
  _$jscoverage['db.js'][74]++;
  if ((userprofile != username)) {
    _$jscoverage['db.js'][76]++;
    for (var index in user.friends) {
      _$jscoverage['db.js'][77]++;
      if ((userprofile == user.friends[index])) {
        _$jscoverage['db.js'][78]++;
        friends = true;
        _$jscoverage['db.js'][79]++;
        break;
      }
}
  }
  _$jscoverage['db.js'][83]++;
  callback({"name": user.name, "username": user.username, "posts": user.posts, "friends": friends});
}));
}));
}
_$jscoverage['db.js'][88]++;
function addPost(response, src_user, target_user, text, callback) {
  _$jscoverage['db.js'][89]++;
  db.collection(loginRepo, (function (err, collection) {
  _$jscoverage['db.js'][90]++;
  collection.findOne({"username": target_user}, (function (err, target_prof) {
  _$jscoverage['db.js'][91]++;
  if ((target_prof != null)) {
    _$jscoverage['db.js'][93]++;
    if ((target_prof.friends.indexOf(src_user) != -1)) {
      _$jscoverage['db.js'][94]++;
      var newPost = {"post": text, "user": src_user};
      _$jscoverage['db.js'][95]++;
      collection.update({"username": target_user}, {$push: {"posts": newPost}});
      _$jscoverage['db.js'][97]++;
      callback(("Post sent to " + target_user + "'s profile!"));
    }
    else {
      _$jscoverage['db.js'][100]++;
      callback(("Cant post on " + target_user + "'s profile yet. You need to be friends first!"));
    }
  }
  else {
    _$jscoverage['db.js'][104]++;
    callback((target_user + " is not a registred user!"));
  }
}));
}));
}
_$jscoverage['db.js'][110]++;
function addFriend(response, src_user, target_user, callback) {
  _$jscoverage['db.js'][111]++;
  db.collection(loginRepo, (function (err, collection) {
  _$jscoverage['db.js'][113]++;
  collection.update({"username": src_user}, {$push: {"friends": target_user}});
  _$jscoverage['db.js'][115]++;
  collection.update({"username": target_user}, {$push: {"friends": src_user}});
  _$jscoverage['db.js'][118]++;
  callback((target_user + " added to your friends!"));
}));
}
_$jscoverage['db.js'][122]++;
function getFriends(response, username, callback) {
  _$jscoverage['db.js'][123]++;
  var friends = new Array();
  _$jscoverage['db.js'][124]++;
  db.collection(loginRepo, (function (err, collection) {
  _$jscoverage['db.js'][125]++;
  collection.findOne({"username": username}, (function (err, user) {
  _$jscoverage['db.js'][126]++;
  for (var index in user.friends) {
    _$jscoverage['db.js'][127]++;
    collection.findOne({"username": user.friends[index]}, (function (err, friend) {
  _$jscoverage['db.js'][128]++;
  friends.push({"name": friend.name, "user": friend.username});
  _$jscoverage['db.js'][131]++;
  if ((user.friends.length == friends.length)) {
    _$jscoverage['db.js'][132]++;
    callback(friends);
  }
}));
}
}));
}));
}
_$jscoverage['db.js'][140]++;
function getOnlineFriends(response, username, callback) {
  _$jscoverage['db.js'][141]++;
  var onlineFriends = new Array();
  _$jscoverage['db.js'][142]++;
  db.collection(loginRepo, (function (err, collection) {
  _$jscoverage['db.js'][143]++;
  collection.findOne({"username": username}, (function (err, user) {
  _$jscoverage['db.js'][144]++;
  var count = 0;
  _$jscoverage['db.js'][146]++;
  for (var index in user.friends) {
    _$jscoverage['db.js'][147]++;
    collection.findOne({"username": user.friends[index]}, (function (err, friend) {
  _$jscoverage['db.js'][148]++;
  (count++);
  _$jscoverage['db.js'][149]++;
  if ((friend.active && (friend.username != username))) {
    _$jscoverage['db.js'][150]++;
    onlineFriends.push({"name": friend.name, "user": friend.username});
  }
  _$jscoverage['db.js'][154]++;
  if ((user.friends.length == count)) {
    _$jscoverage['db.js'][155]++;
    callback(onlineFriends);
  }
}));
}
}));
}));
}
_$jscoverage['db.js'][163]++;
function searchUser(response, query, callback) {
  _$jscoverage['db.js'][164]++;
  db.collection(loginRepo, (function (err, collection) {
  _$jscoverage['db.js'][165]++;
  var regexp = ("(?i).*(" + query + ")+.*");
  _$jscoverage['db.js'][166]++;
  collection.find({"name": {$regex: regexp}}).toArray((function (err, resultProfiles) {
  _$jscoverage['db.js'][167]++;
  var result = new Array();
  _$jscoverage['db.js'][168]++;
  for (var index in resultProfiles) {
    _$jscoverage['db.js'][169]++;
    result[index] = {"user": resultProfiles[index].username, "name": resultProfiles[index].name};
}
  _$jscoverage['db.js'][172]++;
  callback(result);
}));
}));
}
_$jscoverage['db.js'][177]++;
function userDisconnect(username) {
  _$jscoverage['db.js'][178]++;
  db.collection(loginRepo, (function (err, collection) {
  _$jscoverage['db.js'][179]++;
  collection.findOne({"name": username}, (function (err, user) {
  _$jscoverage['db.js'][181]++;
  collection.update({"username": username}, {$set: {"active": false}});
  _$jscoverage['db.js'][182]++;
  console.log("User set to inactive");
}));
}));
}
_$jscoverage['db.js'][189]++;
exports.start = start;
_$jscoverage['db.js'][190]++;
exports.regUser = regUser;
_$jscoverage['db.js'][191]++;
exports.userLogin = userLogin;
_$jscoverage['db.js'][192]++;
exports.userLogoff = userLogoff;
_$jscoverage['db.js'][193]++;
exports.addPost = addPost;
_$jscoverage['db.js'][194]++;
exports.getProfile = getProfile;
_$jscoverage['db.js'][195]++;
exports.addFriend = addFriend;
_$jscoverage['db.js'][196]++;
exports.getFriends = getFriends;
_$jscoverage['db.js'][197]++;
exports.getOnlineFriends = getOnlineFriends;
_$jscoverage['db.js'][198]++;
exports.searchUser = searchUser;
_$jscoverage['db.js'][199]++;
exports.userDisconnect = userDisconnect;
